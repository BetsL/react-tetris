{"version":3,"sources":["gameHelpers.js","components/styles/StyledTetris.js","tetrominos.js","hooks/usePlayer.js","hooks/useStage.js","components/styles/StyledStage.js","components/styles/StyledCell.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/Tetris.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js","img/bg.png"],"names":["createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetrominos","randTetromino","Math","floor","random","usePlayer","useState","collided","setPlayer","rotate","matrix","dir","rotatedTetro","map","_","index","col","row","reverse","resetPlayer","useCallback","STAGE_WIDTH","prev","clonedPlayer","JSON","parse","stringify","offset","useStage","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","cell","forEach","value","reduce","acc","findIndex","unshift","push","sweepRows","StyledStage","props","height","width","StyledCell","type","React","memo","Stage","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","console","log","movePlayer","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.334c8180.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage = () => \n\tArray.from(Array(STAGE_HEIGHT), () =>\n\t\tnew Array(STAGE_WIDTH).fill([0, 'clear'])\n\t)\n\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\n\tfor (let y = 0; y < player.tetromino.length; y+= 1) {\n\t\tfor (let x = 0; x < player.tetromino[y].length; x+= 1) {\n\t\t\t// 1. Check that we're on an actual Tetromino cell\n\t\t\tif (player.tetromino[y][x] !== 0) {\n\t\t\t\tif (\n\t\t\t\t// 2. Check that our move is inside the game area's height (y)\n\t\t\t\t// We shouldn't go through the bottom of the play area\n\t\t\t\t!stage[y + player.pos.y + moveY] ||\n\t\t\t\t// 3. Check that our move is inside the game area's width (x)\n\t\t\t\t\t!stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n\t\t\t\t// 4. Check that the cell we're moving to isn't set to clear\n\t\t\t\t\tstage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear'\n\t\t\t\t) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n\n\n\n","import styled from 'styled-components';\n\nimport bgImage from '../../img/bg.png';\n\nexport const StyledTetrisWrapper = styled.div`\n\twidth: 100vw;\n\theight: 100vh;\n\tbackground: url(${ bgImage }) #000;\n\tbackground-size: cover;\n\toverflow: hidden;\n`\n\nexport const StyledTetris = styled.div`\n\tdisplay: flex;\n\talign-items: flex-start;\n\tpadding: 40px;\n\tmargin: 0 auto;\n\tmax-width: 900px;\n\n\taside {\n\t\twidth: 100%;\n\t\tmax-width: 200px;\n\t\tdisplay: block;\n\t\tpadding: 0 20px;\n\t}\n`\n\n\n\n","export const TETROMINOS = {\n\t0: { shape: [[0]], color: '0, 0, 0' },\n\tI: {\n\t\tshape: [\n\t\t\t\t[0, 'I', 0, 0],\n\t\t\t\t[0, 'I', 0, 0],\n\t\t\t\t[0, 'I', 0, 0],\n\t\t\t\t[0, 'I', 0, 0]\n\t\t\t\t],\n\t\tcolor: '80, 227, 230',\n\t},\n\tJ: {\n\t\tshape: [\n\t\t\t\t[0, 'J', 0],\n\t\t\t\t[0, 'J', 0],\n\t\t\t\t['J', 'J', 0]\n\t\t\t\t],\n\t\tcolor: '36, 95, 223',\n\t},\n\tL: {\n\t\tshape: [\n\t\t\t\t[0, 'L', 0],\n\t\t\t\t[0, 'L', 0],\n\t\t\t\t[0, 'L', 'L']\n\t\t\t\t],\n\t\tcolor: '223, 173, 36',\n\t},\n\tO: {\n\t\tshape: [\n\t\t\t\t['O', 'O'],\n\t\t\t\t['O', 'O'],\n\t\t\t\t],\n\t\tcolor: '223, 217, 36',\n\t},\n\tS: {\n\t\tshape: [\n\t\t\t\t[0, 'S', 'S'],\n\t\t\t\t['S', 'S', 0],\n\t\t\t\t[0, 0, 0]\n\t\t\t\t],\n\t\tcolor: '48, 211, 56',\n\t},\n\tT: {\n\t\tshape: [\n\t\t\t\t[0, 0, 0],\n\t\t\t\t['T', 'T', 'T'],\n\t\t\t\t[0, 'T', 0]\n\t\t\t\t],\n\t\tcolor: '132, 61, 198',\n\t},\n\tZ: {\n\t\tshape: [\n\t\t\t\t['Z', 'Z', 0],\n\t\t\t\t[0, 'Z', 'Z'],\n\t\t\t\t[0, 0, 0]\n\t\t\t\t],\n\t\tcolor: '227, 78, 78',\n\t},\n}\n\nexport const randomTetrominos = () => {\n\tconst tetrominos = 'IJLOSTZ';\n\tconst randTetromino = \n\t\ttetrominos[Math.floor(Math.random() * tetrominos.length)];\n\treturn TETROMINOS[randTetromino];\n}\n\n\n\n","import { useState, useCallback } from 'react';\n\nimport { TETROMINOS, randomTetrominos } from '../tetrominos';\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\n\nexport const usePlayer = () => {\n\tconst [player, setPlayer] = useState({\n\t\tpos: { x: 0, y: 0 },\n\t\ttetromino: TETROMINOS[0].shape,\n\t\tcollided: false,\n\t});\n\n\tconst rotate = (matrix, dir) => {\n\t\t// make the rows to become cols (transpose)\n\t\tconst rotatedTetro = matrix.map((_, index) => \n\t\t\tmatrix.map(col => col[index]),\n\t\t);\n\t\t// reverse each row to get a rotated matrix\n\t\tif (dir > 0) return rotatedTetro.map(row => row.reverse());\n\t\treturn rotatedTetro.reverse();\n\t};\n\n\tconst playerRotate = (stage, dir) => {\n\t\tconst clonedPlayer = JSON.parse(JSON.stringify(player));\n\t\tclonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n\t\tconst pos = clonedPlayer.pos.x;\n\t\tlet offset = 1;\n\t\twhile(checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\n\t\t\tclonedPlayer.pos.x += offset;\n\t\t\toffset = -(offset + (offset > 0 ? 1: -1));\n\t\t\tif (offset > clonedPlayer.tetromino[0].length) {\n\t\t\t\trotate(clonedPlayer.tetromino, -dir);\n\t\t\t\tclonedPlayer.pos.x = pos;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tsetPlayer(clonedPlayer);\n\t};\n\n\tconst updatePlayerPos = ({ x, y, collided }) => {\n\t\tsetPlayer(prev => ({\n\t\t\t...prev,\n\t\t\tpos: { x: (prev.pos.x +=x), y: (prev.pos.y +=y) },\n\t\t\tcollided,\n\t\t}))\n\t}\n\n\tconst resetPlayer = useCallback(() => {\n\t\tsetPlayer({\n\t\t\tpos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n\t\t\ttetromino: randomTetrominos().shape,\n\t\t\tcollided: false,\n\t\t})\n\t}, [])\n\n\treturn [player, updatePlayerPos, resetPlayer, playerRotate];\n}","import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n\tconst [stage, setStage] = useState(createStage());\n\tconst [rowsCleared, setRowsCleared] = useState(0);\n\n\tuseEffect(() => {\n\t\tsetRowsCleared(0);\n\n\t\tconst sweepRows = newStage => \n\t\t\tnewStage.reduce((acc, row) => {\n\t\t\t\tif (row.findIndex(cell => cell[0] === 0) === -1) {\n\t\t\t\t\tsetRowsCleared(prev => prev +1);\n\t\t\t\t\tacc.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n\t\t\t\t\treturn acc;\n\t\t\t\t}\n\t\t\t\tacc.push(row);\n\t\t\t\treturn acc;\n\t\t\t}, [])\n\n\t\tconst updateStage = prevStage => {\n\t\t\t// first flush the stage, clear\n\t\t\tconst newStage = prevStage.map(row => \n\t\t\t\trow.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\n\t\t\t);\n\n\t\t\t// then draw the tetromino\n\t\t\tplayer.tetromino.forEach((row, y) => {\n\t\t\t\trow.forEach((value, x) => {\n\t\t\t\t\tif (value !== 0) {\n\t\t\t\t\t\tnewStage[y + player.pos.y][x + player.pos.x] = [\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\t`${player.collided ? 'merged' : 'clear'}`,\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\t// Then check if we collided\n\t\t\tif (player.collided) {\n\t\t\t\tresetPlayer();\n\t\t\t\treturn sweepRows(newStage);\n\t\t\t}\n\t\t\treturn newStage;\n\t\t};\n\n\t\tsetStage(prev => updateStage(prev));\n\t}, [player, resetPlayer]);\n\n\treturn [stage, setStage, rowsCleared];\n}\n\n\n","import styled from 'styled-components';\n\nexport const StyledStage = styled.div`\n\tdisplay: grid;\n\tgrid-template-rows: repeat(\n\t\t${ props => props.height },\n\t\tcalc(25vw / ${ props => props.width })\n\t);\n\tgrid-template-columns: repeat(${ props => props.width }, 1fr);\n\tgrid-gap: 1px;\n\tborder: 2px solid #333;\n\twidth: 100%;\n\tmax-width: 25vw;\n\tbackground: #111;\n`;","import styled from 'styled-components';\n\nexport const StyledCell = styled.div`\n\twidth: auto;\n\tbackground: rgba(${ props => props.color }, 0.8);\n\tborder: ${ props => (props.type === 0 ? '0px solid' : '4px solid') };\n\tborder-bottom-color: rgba(${ props => props.color }, 0.1);\n\tborder-right-color: rgba(${ props => props.color }, 1);\n\tborder-top-color: rgba(${ props => props.color}, 1);\n\tborder-left-color: rgba(${ props => props.color }, 0.3);\n`;","import React from 'react';\nimport { StyledCell } from './styles/StyledCell';\nimport { TETROMINOS } from '../tetrominos';\n\nconst Cell = ({ type }) => (\n\t<StyledCell type={ type } color={ TETROMINOS[type].color } />\n);\n\nexport default React.memo(Cell);","import React from 'react';\nimport { StyledStage } from './styles/StyledStage';\n\nimport Cell from './Cell';\n\nconst Stage = ({ stage }) => (\n\t<StyledStage width={ stage[0].length } height={ stage.length }>\n\t\t{ stage.map(row => row.map((cell, x) => <Cell key={ x } type={cell[0]} />)) }\n\t</StyledStage>\n);\n\nexport default Stage;","import styled from 'styled-components';\n\nexport const StyledDisplay = styled.div`\n\tbox-sizing: border-box;\n\tdisplay: flex;\n\talign-items: center;\n\tmargin: 0 0 20px 0;\n\tpadding: 20px;\n\tborder: 4px solid #333;\n\tmin-height: 30px;\n\twidth: 100%;\n\tborder-radius: 20px;\n\tcolor: ${ props => (props.gameOver ? 'red' : '#999') };\n\tbackground: #000;\n\tfont-family: Pixel, Arial, Helvetica, sans-serif;\n\tfont-size: 0.8rem;\n`;","import React from 'react';\nimport { StyledDisplay } from './styles/StyledDisplay';\n\nconst Display = ({ gameOver, text }) => (\n\t<StyledDisplay gameOver={gameOver}>{ text }</StyledDisplay>\n)\n\nexport default Display;","import styled from 'styled-components';\n\nexport const StyledStartButton = styled.button`\n\tbox-sizing: border-box;\n\tmargin: 0 0 20px 0;\n\tpadding: 20px;\n\tmin-height: 30px;\n\twidth: 100%;\n\tborder-radius: 20px;\n\tborder: none;\n\tcolor: white;\n\tbackground: #333;\n\tfont-family: Pixel, Arial, Helvetica, sans-serif;\n\tfont-size: 1rem;\n\toutline: none;\n\tcursor: pointer;\n`;","import React from 'react';\nimport { StyledStartButton } from './styles/StyledStartButton';\n\nconst StartButton = ({ callback }) => (\n\t<StyledStartButton onClick={ callback }>Start Game</StyledStartButton>\n)\n\nexport default StartButton;","import React, { useState } from 'react';\n\n// for a clean stage \nimport { createStage, checkCollision } from '../gameHelpers';\n\n// Styled Components\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\n\n// Custom Hooks\nimport { useInterval } from '../hooks/useInterval';\nimport { usePlayer } from '../hooks/usePlayer';\nimport { useStage } from '../hooks/useStage';\nimport { useGameStatus } from '../hooks/useGameStatus';\n\n// Components\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\n\nconst Tetris = () => {\n\tconst [dropTime, setDropTime] = useState(null);\n\tconst [gameOver, setGameOver] = useState(false);\n\n\tconst [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n\tconst [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n\tconst [score, setScore, rows, setRows, level, setLevel] \n\t\t= useGameStatus(rowsCleared);\n\n\tconsole.log('re-render');\n\n\tconst movePlayer = dir => {\n\t\tif (!checkCollision(player, stage, { x: dir, y: 0 })) {\n\t\t\tupdatePlayerPos({ x: dir, y: 0});\n\t\t}\n\t}\n\n\tconst startGame = () => {\n\t\t// reset everything\n\t\tsetStage(createStage());\n\t\tsetDropTime(1000);\n\t\tresetPlayer();\n\t\tsetGameOver(false);\n\t\tsetScore(0);\n\t\tsetRows(0);\n\t\tsetLevel(0);\n\t};\n\n\tconst drop = () => {\n\t\t// Increase level when player has cleared 10 rows\n\t\tif (rows > (level + 1) * 10) {\n\t\t\tsetLevel(prev => prev + 1);\n\t\t\t// Also increase speed\n\t\t\tsetDropTime(1000 / (level + 1) + 200);\n\t\t}\n\t\tif (!checkCollision(player, stage, { x: 0, y: 1 })) {\n\t\t\tupdatePlayerPos({ x: 0, y: 1, collided: false })\n\t\t} else {\n\t\t\t// Game Over\n\t\t\tif (player.pos.y < 1) {\n\t\t\t\tconsole.log('GAME OVER!!!');\n\t\t\t\tsetGameOver(true);\n\t\t\t\tsetDropTime(null);\n\t\t\t}\n\t\t\tupdatePlayerPos({ x: 0, y: 0, collided: true })\n\t\t}\n\t}\n\n\tconst keyUp = ({ keyCode }) => {\n\t\tif (!gameOver) {\n\t\t\tif (keyCode === 40) {\n\t\t\t\tconsole.log('interval on');\n\t\t\t\tsetDropTime(1000 / (level + 1) + 200);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst dropPlayer = () => {\n\t\tconsole.log('interval off');\n\t\tsetDropTime(null);\n\t\tdrop();\n\t}\n\n\tconst move = ({ keyCode }) => {\n\t\tif (!gameOver) {\n\t\t\tif(keyCode === 37) {\n\t\t\t\tmovePlayer(-1);\n\t\t\t} else if (keyCode === 39) {\n\t\t\t\tmovePlayer(1);\n\t\t\t} else if (keyCode === 40) {\n\t\t\t\tdropPlayer();\n\t\t\t} else if (keyCode === 38) {\n\t\t\t\tplayerRotate(stage, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tuseInterval(() => {\n\t\tdrop();\n\t}, dropTime)\n\n\treturn (\n\t\t<StyledTetrisWrapper \n\t\t\trole='button' \n\t\t\ttabIndex='0' \n\t\t\tonKeyDown={e => move(e)} \n\t\t\tonKeyUp={keyUp}\n\t\t>\n\t\t\t<StyledTetris>\n\t\t\t\t<Stage stage={ stage }/>\n\t\t\t\t<aside>\n\t\t\t\t\t{gameOver ? (\n\t\t\t\t\t\t<Display gameOver={gameOver} text='Game Over' />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Display text={`Score: ${score}`} />\n\t\t\t\t\t\t\t<Display text={`Rows: ${rows}`} />\n\t\t\t\t\t\t\t<Display text={`Level: ${level}`} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t<StartButton callback={startGame}/>\n\t\t\t\t</aside>\n\t\t\t</StyledTetris>\n\t\t</StyledTetrisWrapper>\n\t);\n};\n\nexport default Tetris;\n\n","import { useState, useEffect, useCallback } from 'react';\n\nexport const useGameStatus = rowsCleared => {\n\tconst [score, setScore] = useState(0);\n\tconst [rows, setRows] = useState(0);\n\tconst [level, setLevel] = useState(0);\n\n\tconst linePoints = [40, 100, 300, 1200];\n\n\tconst calcScore = useCallback(() => {\n\t\t// We have score\n\t\tif (rowsCleared > 0) {\n\t\t\t// This is how original Tetris score is calculated\n\t\t\tsetScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n\t\t\tsetRows(prev => prev + rowsCleared);\n\t\t}\n\t}, [level, linePoints, rowsCleared]);\n\n\tuseEffect(() => {\n\t\tcalcScore();\n\t}, [calcScore, rowsCleared, score])\n\n\treturn [score, setScore, rows, setRows, level, setLevel];\n\n};\n\n\n\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react';\nimport Tetris from './components/Tetris';\n\nconst App = () => (\n  <div className='App'>\n    <Tetris />\n  </div>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";"],"sourceRoot":""}